MINT: User → API → Auth/KYC → Reserve Check → Custodian Webhook → Smart Contract → Mint Tokens
YIELD: Fund Admin → Oracle → Rate Service → Smart Contract → Update Balances (Daily)
REDEMPTION: User → API → Burn Request → Reserve Deduction → Custodian Payout → Blockchain Update

```mermaid
graph TD
    Admin["Admin (MINTER_ROLE)"] --> Mint["mint(address, amount)"]
    Mint --> ConvertShares["Convert amount to shares: shares = amount * BASE / rewardMultiplier"]
    ConvertShares --> IncreaseShare["Increase recipient's share balance"]
    IncreaseShare --> IncreaseTotalShares["Increase total shares"]
    IncreaseTotalShares --> EmitTransfer["Emit Transfer event"]
```

```mermaid
graph TD
    User --> Transfer["transfer(to, amount)"]
    Transfer --> ConvertTokens["Convert tokens to shares: shares = amount * BASE / rewardMultiplier"]
    ConvertTokens --> DeductShares["Deduct shares from sender"]
    DeductShares --> AddShares["Add shares to recipient"]
    AddShares --> ConvertBack["Convert recipient's shares back to tokens"]
    ConvertBack --> EmitTransfer["Emit Transfer event"]
```

```mermaid
graph TD
    Oracle["Oracle (ORACLE_ROLE)"] --> AddReward["addRewardMultiplier(increment)"]
    AddReward --> IncreaseReward["Increase rewardMultiplier"]
    IncreaseReward --> UpdateBalances["Balances update: tokens = shares * new multiplier / BASE"]
```

```mermaid
graph TD
    User --> Deposit["wUSDX.deposit(amount)"]
    Deposit --> TransferVault["Transfer USDX to vault"]
    TransferVault --> MintWUSDX["Mint wUSDX tokens 1:1 with deposit"]
    MintWUSDX --> HoldRebasing["wUSDX vault holds rebasing USDX"]
    HoldRebasing --> WithdrawYield["Withdrawal returns increased USDX due to yield"]
```