UPDATING THE REWARD MULTIPLIER
1 Yield accrues intraday; PM submits EOD yield data
2 Oracle verifies data and portfolio; contract validates yield
3 addRewardMultiplier applies daily yield, increasing rewardMultiplier
4 rewardMultiplier multiplies stored shares to compute effective USDX balance
5 Transfers convert USDX to shares (e.g., 100 USDX = 100/1.047 shares)
6 Total supply adjusts as totalShares × rewardMultiplier, optimizing gas

DATA FLOW
1 Portfolio calculates yield and triggers addRewardMultiplier w/ positive increment
2 addRewardMultiplier verifies increment > 0 and updates rewardMultiplier by adding the increment
3 _setRewardMultiplier emits the new multiplier, affecting share-to-token conversion
4 Mint/transfer functions use convertToShares: shares = (amount × BASE) / rewardMultiplier
5 User balance = shares × rewardMultiplier / BASE, reflecting accrued yield
6 Transfers update _shares and emit events, preserving yield adjustments
7 Pausable and blocklist hooks ensure only valid transfers proceed